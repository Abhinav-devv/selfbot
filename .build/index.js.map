{
  "version": 3,
  "sources": ["../index.ts"],
  "sourcesContent": ["// sets a constant to determine whether the bot should respond without prompt\nlet respondWithoutPrompt = false;\nconst commandPrefix = '!';\n\n// import required models\nconst fs = require('fs');\nconst path = require('path');\nconst cron = require('node-cron');\n\nconst {\n  InworldClient,\n  InworldPacket,\n  ServiceError,\n  SessionToken,\n  status,\n} = require('@inworld/nodejs-sdk');\n\nconst {\n  Client,\n  DMChannel,\n  GatewayIntentBits,\n  Message,\n  Partials,\n  TextChannel,\n} = require('discord.js');\n// Initialize Discord client with required intents and partials\nconst discordClient = new Client({\n  intents: [\n    GatewayIntentBits.Guilds,\n    GatewayIntentBits.GuildMessages,\n    GatewayIntentBits.MessageContent,\n    GatewayIntentBits.DirectMessages,\n    GatewayIntentBits.DirectMessageTyping,\n    GatewayIntentBits.DirectMessageReactions,\n  ],\n  partials: [Partials.Channel],\n});\n// Define sessions file and parse its content \nconst sessionsFile = 'sessions.json';\nconst sessions = JSON.parse(fs.readFileSync(sessionsFile, 'utf8'));\nconst sessionsFilePath = path.join(__dirname, 'session.json');\n\nconst readSessionsFile = () => {\n  if (!fs.existsSync(sessionsFilePath)) {\n    const emptySessions = {};\n    fs.writeFileSync(sessionsFilePath, JSON.stringify(emptySessions));\n  }\n  return JSON.parse(fs.readFileSync(sessionsFilePath, 'utf8'));\n};\n// Function to reset sessions file\nconst resetSessionsFile = () => {\n  if (fs.existsSync(sessionsFilePath)) {\n    try {\n      fs.unlinkSync(sessionsFilePath);\n    } catch (error) {\n      console.error(`Error deleting session.json: \\${error.message}`);\n    }\n  }\n  const emptySessions = {};\n  fs.writeFileSync(sessionsFilePath, JSON.stringify(emptySessions));\n  console.log('Reset session.json file');\n};\n// Main function to run the bot\nconst run = async function () {\n  // When the bot is ready, log to console and reset sessions file\n  discordClient.on('ready', () => {\n    console.log(\"I'm ready!\");\n    resetSessionsFile();\n    // Schedule the reset of sessions file every 15 minutes\n    cron.schedule('*/15 * * * *', resetSessionsFile);\n  });\n// When a message is created, process it\n\n  \n  discordClient.on('messageCreate', async (message) => {\n    // Ignore messages from bots\n    if (message.author.bot) return;\n\n    // Check for commands\nif (message.content.startsWith(commandPrefix)) {\n    const args = message.content.slice(commandPrefix.length).trim().split(/ +/);\n    const command = args.shift().toLowerCase();\n\n    if (command === 'toggle') {\n      respondWithoutPrompt = !respondWithoutPrompt;\n      message.channel.send(`respondWithoutPrompt is now ${respondWithoutPrompt ? 'enabled' : 'disabled'}`);\n      return;\n    }\n  }\n    \n  // If set to respond without prompt, send a message\n  if (respondWithoutPrompt) {\n    sendMessage(message);\n  } else {\n      // Check if the message only contains mentions\n      const hasMentionsOnly = /^<[@|#|@&].*?>$/g.test(\n        message.content.replace(/\\s+/g, '')\n      );\n      // If it's a direct message, send a message\n      if (message.channel instanceof DMChannel) {\n        sendMessage(message, true);\n      } else if (discordClient.user && message.mentions.has(discordClient.user)) {\n        // If the bot is mentioned, send a message\n        if (hasMentionsOnly) message.content = '*user says nothing*';\n        sendMessage(message);\n      }\n    }\n  });\n// Log in to Discord with the bot token\n  discordClient.login(process.env.DISCORD_BOT_TOKEN);\n};\n\n// Check for required environment variables and log their values\n\n\nif (!process.env.INWORLD_KEY) {\n  throw new Error('INWORLD_KEY env variable is required');\n}\nconsole.log(`INWORLD_KEY: ${process.env.INWORLD_KEY}`);\n\nif (!process.env.INWORLD_SECRET) {\n  throw new Error('INWORLD_SECRET env variable is required');\n}\nconsole.log(`INWORLD_SECRET: ${process.env.INWORLD_SECRET}`);\n\nif (!process.env.INWORLD_SCENE) {\n  throw new Error('INWORLD_SCENE env variable is required');\n}\nconsole.log(`INWORLD_SCENE: ${process.env.INWORLD_SCENE}`);\n\nif (!process.env.DISCORD_BOT_TOKEN) {\n  throw new Error('DISCORD_BOT_TOKEN env variable is required');\n}\nconsole.log(`DISCORD_BOT_TOKEN: ${process.env.DISCORD_BOT_TOKEN}`);\n// Run the main function\nrun();\n// Function to send a message to the InworldClient\nconst sendMessage = async (message, direct) => {\n  const content = message.content.replace(`<@${discordClient.user.id}>`, '');\n  const client = await createInworldClient({ direct, message });\n  const user = message.author.username;\n  client.sendText(`Message from ${user}: ${content}`);\n};\n// Function to generate a session key\nconst getKey = (message) => `${message.channel.id}_${message.author.id}`;\n// Function to generate a session token\nconst generateSessionToken = (key) => {\n  return async () => {\n    console.log('Generating session token...');\n    const client = new InworldClient().setApiKey({\n      key: process.env.INWORLD_KEY,\n      secret: process.env.INWORLD_SECRET,\n    });\n    console.log(`API key: ${process.env.INWORLD_KEY}`);\n    console.log(`API secret: ${process.env.INWORLD_SECRET}`);\n    const token = await client.generateSessionToken();\n    console.log(`Generated session token: ${token.toString()}`);\n    const sessionId = sessions[key];\n    const actualToken = new SessionToken({\n      expirationTime: token.getExpirationTime(),\n      token: token.getToken(),\n      type: token.getType(),\n      sessionId: sessionId || token.getSessionId(),\n    });\n    if (!sessionId) {\n      sessions[key] = actualToken.getSessionId();\n      fs.writeFileSync(sessionsFile, JSON.stringify(sessions));\n    }\n    return actualToken;\n  };\n};\n// Create an Inworld client with the required props\nconst createInworldClient = async (props) => {\n  const { message, direct } = props;\n  const key = getKey(message);\n   // Set the Inworld client's configuration, error handling, and message handling\n  const client = new InworldClient()\n    .setGenerateSessionToken(generateSessionToken(key))\n    .setConfiguration({\n      capabilities: { audio: false },\n      ...(direct ? {} : { connection: { disconnectTimeout: 5 * 1000 } }),\n    })\n    .setScene(process.env.INWORLD_SCENE)\n    .setOnError(handleError(message))\n    .setOnMessage((packet) => {\n      if (!direct && packet.isInteractionEnd()) {\n        client.close();\n        return;\n      }\n      if (packet.isText() && packet.text.final) {\n        message.channel.send(packet.text.text);\n      }\n    })\n    .build();\n  return client;\n};\n// Function to handle errors in the Inworld client\nconst handleError = (message, direct) => {\n  return (err) => {\n    switch (err.code) {\n      case status.ABORTED:\n      case status.CANCELLED:\n        break;\n      case status.FAILED_PRECONDITION:\n        sendMessage(message, direct);\n        break;\n      default:\n        console.error(`Error: ${err.message}`);\n        break;\n    }\n  };\n};\n// Function to clean up and exit the bot process\nconst done = () => {\n  discordClient.destroy();\n};\n// Attach event listeners to handle process signals and unhandled rejections\nprocess.on('SIGINT', done);\nprocess.on('SIGTERM', done);\nprocess.on('SIGUSR2', done);\nprocess.on('unhandledRejection', (err) => {\n  console.error(err.message);\n  done();\n});\n"],
  "mappings": "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",
  "names": []
}
